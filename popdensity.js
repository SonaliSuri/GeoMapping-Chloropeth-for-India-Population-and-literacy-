/*------------------------------------------------------------------------------------------------------------------------------------------------------
Define width and height
------------------------------------------------------------------------------------------------------------------------------------------------------*/
var w = 4000;
var h = 1625;

/*------------------------------------------------------------------------------------------------------------------------------------------------------
Define map projection
------------------------------------------------------------------------------------------------------------------------------------------------------*/
var projection = d3.geoMercator()
                   .scale([1200])
                   .translate([-1240, 1050]);


/*------------------------------------------------------------------------------------------------------------------------------------------------------
Define path generator
------------------------------------------------------------------------------------------------------------------------------------------------------*/
var path = d3.geoPath()
             .projection(projection);

/*------------------------------------------------------------------------------------------------------------------------------------------------------
Create SVG element
------------------------------------------------------------------------------------------------------------------------------------------------------*/
var svg = d3.select("body")
            .append("svg")
            .attr("width", w)
            .attr("height", h);

/*------------------------------------------------------------------------------------------------------------------------------------------------------
Define tooltip
------------------------------------------------------------------------------------------------------------------------------------------------------*/
var tooltip = d3.select("body").append("div")
.attr("class", "tooltip")
.style("opacity", 0)
.classed("hidden", true);

/*------------------------------------------------------------------------------------------------------------------------------------------------------
Define colors
------------------------------------------------------------------------------------------------------------------------------------------------------*/
var color = d3.scaleQuantize()
.range(['rgb(255,255,217)','rgb(237,248,177)','rgb(199,233,180)','rgb(127,205,187)','rgb(65,182,196)','rgb(29,145,192)','rgb(34,94,168)','rgb(37,52,148)','rgb(8,29,88)']);


/*------------------------------------------------------------------------------------------------------------------------------------------------------
Load populationdensity.csv
------------------------------------------------------------------------------------------------------------------------------------------------------*/
     d3.csv("populationdensity.csv").then(function(populationcsv) {
    
    
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Store data in stateData
------------------------------------------------------------------------------------------------------------------------------------------------------*/
        var stateData = [];
        for(var i = 0; i < populationcsv.length; i++){
            stateData.push({region:populationcsv[i].Region,
                             density:populationcsv[i].Population});
        }

        
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Load json data
------------------------------------------------------------------------------------------------------------------------------------------------------*/
            d3.json("INDIA.geojson").then(function(json) {
            console.log(json);
        stateData.forEach(function(region, i){
            var dataRegionName = region.region;
            var dataDensity = parseFloat(region.density);
           
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Find correct feature in json (statename) and assign correct density value from csv based on state name
------------------------------------------------------------------------------------------------------------------------------------------------------*/
            for (var j = 0; j < json.features.length; j++){
                var jsonRegionName = json.features[j].properties.NAME_1;
                console.log(jsonRegionName);
                console.log(dataRegionName);
                if(dataRegionName == jsonRegionName){
                    console.log("Yes");
                    console.log(json.features[j].properties.name);
                    json.features[j].properties.density = dataDensity;
                    break;
                }
                
            }
        })  
            console.log(stateData);
            console.log(json);
    
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Bind data and create one path per GeoJSON feature
------------------------------------------------------------------------------------------------------------------------------------------------------*/
        svg.selectAll("path")
                    .data(json.features)
                    .enter()
                    .append("path")
                    .attr("d", path)
                    .style("stroke", "black")
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Mouseover and mouseout events for tooltips
------------------------------------------------------------------------------------------------------------------------------------------------------*/
                    .on("mouseover", function(d){
            
                        tooltip.transition()		
                        .duration(1)	
                        .style("opacity", .9);		
                        tooltip .html(d.properties.NAME_1 + "<br>" + "Population Density: " + +d.properties.density.toFixed(2) + " people/square km")          
                        .style("left", (d3.event.pageX + 10) + "px")
                        .style("top", (d3.event.pageY - 28) + "px");	
		 
            
			       })
			       .on("mouseout", function() {
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Hide tooltip on mouseout
------------------------------------------------------------------------------------------------------------------------------------------------------*/
                        tooltip.transition()		
                        .duration(1)		
                        .style("opacity", 0)
                        .style("left", (d3.event.pageX + 10) + "px")
                        .style("top", (d3.event.pageY - 28) + "px");
			       })
                    .style("fill", function(d){
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Fill colors based on density. ower the density lighter the color.
------------------------------------------------------------------------------------------------------------------------------------------------------*/
                        var density = d.properties.density;
                        if(!density){
                            return '#ccc';
                        }
                        if(density < 26){
                            return 'rgb(255,255,217)';
                        }
                        else if (density < 51){
                            return 'rgb(237,248,177)';
                        }
                        else if (density < 101){
                            return 'rgb(199,233,180)';
                        }
                        else if (density < 251){
                            return 'rgb(127,205,187)';
                        }
                        else if (density < 501){
                            return 'rgb(65,182,196)';
                        }
                        else if (density < 1001){
                            return 'rgb(29,145,192)';
                        }
                        else if (density < 2501){
                            return 'rgb(34,94,168)';
                        }
                        else if (density < 5001){
                            return 'rgb(37,52,148)';
                        }
                        else if (density < 10001){
                            return 'rgb(37,52,148)';
                        }
                        else{
                            return "rgb(8,29,88)";
                        }
                    }); 
		
                    console.log(json.features);
            
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Legends for colors
------------------------------------------------------------------------------------------------------------------------------------------------------*/
            
            var legend = d3.select('svg')
                       .append('g')
                       .selectAll('g')
                       .data(color.range())
                       .enter()
                       .append('g')
                       .attr('class', 'legend')
                       .text("hi there")
                       .attr('transform', function(d, i){
                           var height = 30;
                           var x = 700;
                           var y = i * height;
                           return 'translate(' + x + ',' + (y + 40) + ')';
                       });
/*------------------------------------------------------------------------------------------------------------------------------------------------------
Appending a rectangle for each color
------------------------------------------------------------------------------------------------------------------------------------------------------*/
            legend.append('rect')
                    .attr('width', 20)
                    .attr('height', 20)
                    .style('fill', function(d){ return d; })
                    .style('stroke', color);
            legend.append('text')
                    .attr('x', 25)
                    .attr('y', 16)
                    .text(function(d, i){
                    var ranges = ["1-25", "26-50", "51-100", "101-250", "251-500", "501-1000", "1001-2500", "2501-5000", "5001-10000", ">10000"];
                        return ranges[i] + "   people/square km";
                    });
        });
  
});

            
			